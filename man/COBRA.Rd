% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/COBRA.R
\name{COBRA}
\alias{COBRA}
\title{COVID-19 Binding Affinity Repertoire Assessment}
\usage{
COBRA(
  generatefiles = FALSE,
  ds_filename = NULL,
  res_sel = NULL,
  lookuptable_c1 = NULL,
  lookuptable_c2 = NULL,
  c1_predict_method = "netmhcpan",
  fasta_files = list.files(system.file("extdata/ref_FASTA", package = "COBRA"),
    full.names = TRUE),
  exclude_forbidDQ = TRUE,
  exclude_forbidDP = TRUE,
  dpa_rule = "50",
  threshold = "relaxed",
  dev = FALSE,
  chop_path = NULL,
  mhcpan_path = NULL,
  netmhcIIpanpath = NULL,
  nc_path = NULL
)
}
\arguments{
\item{generatefiles}{a Boolean value for whether the lookup table needs to be generated. If TRUE,
the entire COBRA pipeline will be executed, and all parameters must be provided. If FALSE, 
only ds_filename, res_sel, and lookuptable_c1 and/or lookuptable_c2 (depending on res_sel chosen)
parameters need to be populated. Default value is FALSE. Note: we do not recommend generating
your own look up tables if they are already bundled in the package. Running the entire pipeline
for the SARS-CoV-2 sequence is computationally expensive. Please see more details in the vignette.}

\item{ds_filename}{a BIGDAWG formatted HLA genotype dataset, where there is 
an identifying subject column (SID), a phenotype, where control = 0 and 
case = 1 (Disease), and two columns per HLA locus. Please see the vignette
for an example of a BIGDAWG formatted dataset.}

\item{res_sel}{pipeline selection for whether results should contain HLA Class I
evaluation, HLA Class II evaluation, or both. Options include "c1", "c2", or "both".}

\item{lookuptable_c1}{The path to the look up table generated for Class I. This parameter ONLY needs to be 
populated if generatefiles = FALSE and res_sel = 'c1' or 'both'. If generatefiles = TRUE, the generated look up table
name will be passed to the downstream processing functions. If generatefiles = FALSE, the
path to the look up table name must be provided. Please make sure the c1_predict_method parameter is populated with the method
used in the look up table. If a the c1_predict_method is not in alignment with the look up table populated for this parameter, 
alleles will not be mapped properly. If a mhcflurry look up table is specified for this parameter, but the 
c1_predict_method is the default 'netmhcpan', alleles will NOT be mapped properly.}

\item{lookuptable_c2}{The path to the look up table generated for Class II. This parameter ONLY needs to be 
populated if generatefiles = FALSE and res_sel = 'c2' or 'both'. If generatefiles = TRUE, the generated look up table
name will be passed to the downstream processing functions. If generatefiles = FALSE, the
path to the look up table name must be provided.}

\item{c1_predict_method}{Binding Affinity Prediction method used for Class I. Accepted values
are 'mhcflurry' or 'netmhcpan'. Default is set to 'netmhcpan'.}

\item{fasta_files}{FASTA file for a given protein. Default 
value is set to the inst/extdata/ref_FASTA folder, which contains FASTA files
for the SARS-CoV2 reference proteins. If the user is using other FASTA files,
the full path to the file must be provided. FASTA files should only contain
ONE protein sequence per file if Class II evaluation is desired. The FASTA file
should be follow this naming convention: '<protein>_<identifier>.faa', where 
<protein> is the protein name for the given sequence, and <identifier> is the 
the viral strain or organism identifier. EX: 'S_ref.faa', where 'S' is the Spike
protein, and 'ref' is the SARS-CoV2 reference strain. If the user wishes to regenerate
look up tables for the Beta or Omicron BA.1 sequences, 
list.files(system.file("extdata/<folder>", package = "COBRA"), full.names = TRUE) 
should be used, where the name of the <folder> is beta_FASTA or omiba1_FASTA. 
the vignette for more details.}

\item{exclude_forbidDQ}{A Boolean value for whether forbidden DQ heterodimers should
be excluded from score evaluation. Default is set to TRUE.}

\item{exclude_forbidDP}{A Boolean value for whether forbidden DP heterodimers should
be excluded from score evaluation. Default is set to TRUE.}

\item{dpa_rule}{Dimerization rule to implement if excludeforbidDP is TRUE. 
Options include "31" or "50". Default is set to "50".}

\item{threshold}{the threshold to use for filtering NetCleave predictions.
A relaxed threshold filters peptides that are likely to be generated,
whereas a stringent threshold filters peptides that are highly likely to be generated.
Options are 'relaxed' or 'stringent'. Default is set to 'relaxed'.}

\item{dev}{A Boolean value for whether the function is being executed for development
and testing purposes. Default is set to FALSE. This value should NEVER be altered
by the user.}

\item{chop_path}{The path to the user's installation of NetChop. Required for Class I processing.}

\item{mhcpan_path}{The path to the user's installation of NetMHCpan. Required for Class I processing.}

\item{netmhcIIpanpath}{The path to the user's installation of NetMHCIIpan. Required for Class II processing.}

\item{nc_path}{The path to the cloned NetCleave repo. Required for Class II processing.}
}
\value{
A look up table/s for the pipeline selection, a COBRA log, and the scores generated for the input dataset,
output to the user's working directory. If 'both' was selected, a log for Class I and Class II will be output to 
the user's working directory. The COBRA log will not contain Class I and Class II processing logging information, 
since they are running in parallel.
The Class I look up table will be named LookUpTable_ClassI_<variant>_<predict-method>_<random alphanumeric sequence>.csv', 
where <variant> is the SARS-CoV2 variant, and <predict_method> is the binding affinity prediction method used. 
If the bundled SARS-CoV-2 FASTA files are used, the variant will be 'ref'. 
The Class II look up table will be named 'LookUpTable_ClassII_<variant>_<threshold>_<random alphanumeric sequence>.csv', 
where <variant> is the SARS-CoV2 variant and <threshold> is the threshold selected. If the bundled SARS-CoV-2 FASTA files are used, the variant will be 'ref'. 
The COBRA log will be named 'COBRA_<random alphanumeric sequence>.log'. 
The Class and Class II logs will be named 'c1_<random alphanumeric sequence>.log' and 'c2_<random alphanumeric sequence>.log', respectively. 
Generated score files will be named '<dataset>_ScoreOutput_<res>_<random alphanumeric sequence>', where <dataset> is the name of the dataset and <res> is the pipeline selection.
}
\description{
Generates peptide binding affinity scores for Class I and/or Class II HLA alleles
and the reference SARS-CoV-2 strain. Protein sequences for the reference SARS-COV-2
strain are bundled in the package. Users can also use COBRA for other virus
sequences.
}
\note{
The user's working directory MUST be set to where the input FASTA files are located if 
the bundled SARS-CoV2 FASTA files are not being used.

If an error occurs in the pipeline AFTER the look up table has been generated,
generatefiles should be set to FALSE.

If generatefiles = TRUE, COBRA will take a long time to run. If Class I 
or Class II pipelines are chosen, the log will output to the console to update the
user on which step the execution is on. If both pipelines are chosen, the log
in the console will not update as the job executes, since they are separate processes. 
To view what step each pipeline is on, copy the 'Class I Log File' and 'Class II Log File' file
paths from the beginning of the log console. In the Terminal, run 'more <copied_path>', where
copied_path is the path to the Class I or Class II log.

FASTA files for the Beta and Omicron BA.1 SARS-CoV2 Variants of Concern (VOCs) are included
in COBRA. These sequences were scraped from user submissions to the NCBI website and are not officially
published by NCBI, so they may not be  entirely accurate. The other VOCs were not included, 
due to an issue with formatting or completeness with the user submissions. 
Look up tables for the SARS-CoV-2 reference, Beta, and Omicron BA.1 proteomes are bundled in COBRA.
Link to Beta NCBI submission: https://www.ncbi.nlm.nih.gov/nuccore/MW598419.1
Link to Omicron BA.1 NCBI submission: https://www.ncbi.nlm.nih.gov/nuccore/OL672836
}
\examples{
#COBRA usage for generating look up tables for ONLY Class I HLA alleles
\donttest{COBRA(generatefiles = TRUE, res_sel = "c1", c1_predict_method = "netmhcpan", chop_path = "pathtoyournetchop/netchop-3.1/netchop", mhcpan_path = "pathtoyour/netMHCpan-4.1/netMHCpan", ds_filename = "your_bigdawg_dataset.txt")}
#COBRA usage for generating look up tables for ONLY Class II HLA alleles
\donttest{COBRA(generatefiles = TRUE, res_sel = "c2", nc_path = 'pathtoyour/NetCleave', threshold = "relaxed", netmhcIIpanpath = "pathtoyour/netMHCIIpan-4.1/netMHCIIpan", ds_filename = "your_bigdawg_dataset.txt")}
#COBRA usage for generating look up tables for Class I AND Class II HLA alleles
\donttest{COBRA(generatefiles = TRUE, res_sel = "both", c1_predict_method = "mhcflurry", exclude_forbidDQ = TRUE, exclude_forbidDP = TRUE, dpa_rule = "50", chop_path = "pathtoyour/netchop-3.1/netchop", mhcpan_path = "pathtoyour/netMHCpan-4.1/netMHCpan", netmhcIIpanpath = "pathtoyour/netMHCIIpan-4.1/netMHCIIpan",ds_filename = "your_bigdawg_dataset.txt", threshold = "relaxed", nc_path = 'pathtoyour/NetCleave')}
#COBRA usage for generating scores for an existing look up table for class I
\donttest{COBRA(generatefiles = FALSE, res_sel = 'c1', ds_filename = "yourbigdawg_dataset.txt")}

}
